[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\zzz\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\zzz\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 127.9186ms
[debug]       Load.loadUnit: defsScala took 0.1838ms
[debug] [Loading] Scanning directory C:\Users\zzz\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zzz\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.232 ms
[debug]           Load.resolveProject(global-plugins) took 26.9164ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\zzz\.sbt\1.0\plugins, plugins: List(<none>))) took 51.9431ms
[debug] [Loading] Done in C:\Users\zzz\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 65.39ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1582ms
[debug]     Load.loadUnit(file:/C:/Users/zzz/.sbt/1.0/plugins/, ...) took 198.1425ms
[debug]   Load.apply: load took 304.0126ms
[debug]   Load.apply: resolveProjects took 4.3105ms
[debug]   Load.apply: finalTransforms took 34.241ms
[debug]   Load.apply: config.delegates took 4.6115ms
[debug]   Load.apply: Def.make(settings)... took 193.7746ms
[debug]   Load.apply: structureIndex took 49.6695ms
[debug]   Load.apply: mkStreams took 0.9784ms
[info] loading global plugins from C:\Users\zzz\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1285.652ms
[debug]           Load.loadUnit: plugins took 18.6808ms
[debug]           Load.loadUnit: defsScala took 0.0062ms
[debug] [Loading] Scanning directory C:\Users\zzz\Desktop\spinal_xdmaDemo\project
[debug]             Load.loadUnit: mkEval took 4.9073ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zzz\Desktop\spinal_xdmaDemo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5867 ms
[info] loading settings for project spinal_xdmademo-build from idea1.sbt ...
[debug]               Load.resolveProject(spinal_xdmademo-build) took 1.7124ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spinal_xdmademo-build, base: C:\Users\zzz\Desktop\spinal_xdmaDemo\project, plugins: List(<none>))) took 3.6445ms
[debug] [Loading] Done in C:\Users\zzz\Desktop\spinal_xdmaDemo\project, returning: (spinal_xdmademo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 105.5363ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.6469ms
[debug]         Load.loadUnit(file:/C:/Users/zzz/Desktop/spinal_xdmaDemo/project/, ...) took 127.4958ms
[debug]       Load.apply: load took 128.2611ms
[debug]       Load.apply: resolveProjects took 0.074ms
[debug]       Load.apply: finalTransforms took 4.4896ms
[debug]       Load.apply: config.delegates took 0.2123ms
[debug]       Load.apply: Def.make(settings)... took 38.3463ms
[debug]       Load.apply: structureIndex took 13.6742ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from C:\Users\zzz\Desktop\spinal_xdmaDemo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 316.9836ms
[debug]     Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\zzz\Desktop\spinal_xdmaDemo
[debug]       Load.loadUnit: mkEval took 0.1944ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zzz\Desktop\spinal_xdmaDemo, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8483 ms
[info] loading settings for project spinal_xdmademo from build.sbt ...
[debug]         Load.resolveProject(spinal_xdmademo) took 18.7226ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spinal_xdmademo, base: C:\Users\zzz\Desktop\spinal_xdmaDemo, plugins: List(<none>))) took 21.4075ms
[debug] [Loading] Done in C:\Users\zzz\Desktop\spinal_xdmaDemo, returning: (spinal_xdmademo)
[debug]     Load.loadUnit: loadedProjectsRaw took 78.1687ms
[debug]     Load.loadUnit: cleanEvalClasses took 1.5075ms
[debug]   Load.loadUnit(file:/C:/Users/zzz/Desktop/spinal_xdmaDemo/, ...) took 397.042ms
[debug] Load.apply: load took 398.015ms
[debug] Load.apply: resolveProjects took 0.0743ms
[debug] Load.apply: finalTransforms took 14.1865ms
[debug] Load.apply: config.delegates took 0.1946ms
[debug] Load.apply: Def.make(settings)... took 30.0915ms
[debug] Load.apply: structureIndex took 9.7749ms
[debug] Load.apply: mkStreams took 0.0053ms
[info] set current project to spinal_xdmaDemo (in build file:/C:/Users/zzz/Desktop/spinal_xdmaDemo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49354 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49354, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spinal_xdmaDemo (in build file:/C:/Users/zzz/Desktop/spinal_xdmaDemo/)
[debug] > Exec(idea-shell, None, None)
